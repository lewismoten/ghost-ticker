const byte SHIFT_DATA = 9; // 74HC595 DS pin 14
const byte SHIFT_LATCH = 8; // 74HC595 STCP pin 12
const byte SHIFT_CLOCK = 7; // 74HC595 SHCP pin 11

int i = -1;
char text[] = "Glow";
int TEXT_SIZE = sizeof(text) - 1;

// NOTE: chars are lower ascii mapped, offset by 32
// 2- bit 5x8 monospace font
// first byte is left column, top to bottom
const int CHAR_COUNT = 95;
const int CHAR_WIDTH = 5;
const byte font[CHAR_COUNT * CHAR_WIDTH] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, // Space (32::0)
  0x00, 0x00, 0x5F, 0x00, 0x00, // !
  0x00, 0x03, 0x00, 0x03, 0x00, // "
  0x22, 0x7F, 0x22, 0x7F, 0x22, // #
  0x24, 0x4A, 0xFF, 0x52, 0x24, // $
  0x22, 0x15, 0x4A, 0xA4, 0x42, // %
  0x76, 0x89, 0x96, 0x60, 0x90, // &
  0x00, 0x00, 0x03, 0x00, 0x00, // '
  0x00, 0x3E, 0x41, 0x00, 0x00, // ( 40
  0x00, 0x00, 0x41, 0x3E, 0x00, // )
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A, // * ::10
  0x00, 0x08, 0x1C, 0x08, 0x00, // +
  0x00, 0x80, 0x40, 0x00, 0x00, // ,
  0x00, 0x08, 0x08, 0x08, 0x00, // -
  0x00, 0x00, 0x40, 0x00, 0x00, // .
  0x20, 0x10, 0x08, 0x04, 0x02, // /
  0x3E, 0x61, 0x5D, 0x43, 0x3E, // 0
  0x00, 0x42, 0x7F, 0x40, 0x00, // 1
  0x72, 0x49, 0x49, 0x49, 0x46, // 2 50
  0x21, 0x41, 0x49, 0x4D, 0x33, // 3
  0x0F, 0x08, 0x08, 0x08, 0x7F, // 4 ::20
  0x2F, 0x49, 0x49, 0x49, 0x31, // 5
  0x3E, 0x49, 0x49, 0x49, 0x32, // 6
  0x01, 0x01, 0x61, 0x19, 0x07, // 7
  0x36, 0x49, 0x49, 0x49, 0x36, // 8
  0x26, 0x49, 0x49, 0x49, 0x3E, // 9
  0x00, 0x00, 0x14, 0x00, 0x00, // :
  0x00, 0x20, 0x14, 0x00, 0x00, // ;
  0x08, 0x14, 0x22, 0x41, 0x00, // < 60
  0x00, 0x14, 0x14, 0x14, 0x00, // =
  0x00, 0x41, 0x22, 0x14, 0x08, // > ::30
  0x06, 0x01, 0x51, 0x09, 0x06, // ?
  0x3E, 0x41, 0x5D, 0x51, 0x2E, // @
  0x7C, 0x12, 0x11, 0x12, 0x7C, // A
  0x7F, 0x49, 0x49, 0x49, 0x36, // B
  0x3E, 0x41, 0x41, 0x41, 0x22, // C
  0x7F, 0x41, 0x41, 0x41, 0x3E, // D
  0x7F, 0x49, 0x49, 0x41, 0x41, // E
  0x7F, 0x09, 0x09, 0x01, 0x01, // F 70
  0x3E, 0x41, 0x41, 0x51, 0x32, // G
  0x7F, 0x08, 0x08, 0x08, 0x7F, // H ::40
  0x41, 0x41, 0x7F, 0x41, 0x41, // I
  0x20, 0x40, 0x40, 0x40, 0x3F, // J
  0x7F, 0x08, 0x14, 0x22, 0x41, // K
  0x7F, 0x40, 0x40, 0x40, 0x40, // L
  0x7F, 0x06, 0x0C, 0x06, 0x7F, // M
  0x7F, 0x06, 0x1C, 0x30, 0x7F, // N
  0x3E, 0x41, 0x41, 0x41, 0x3E, // O
  0x7F, 0x09, 0x09, 0x09, 0x06, // P 80
  0x3E, 0x41, 0x41, 0x21, 0x5E, // Q
  0x7F, 0x09, 0x19, 0x29, 0x46, // R ::50
  0x26, 0x49, 0x49, 0x49, 0x32, // S
  0x01, 0x01, 0x7F, 0x01, 0x01, // T
  0x3F, 0x40, 0x40, 0x40, 0x3F, // U
  0x07, 0x18, 0x60, 0x18, 0x07, // V
  0x7F, 0x20, 0x10, 0x20, 0x7F, // W
  0x63, 0x36, 0x08, 0x36, 0x63, // X
  0x03, 0x04, 0x78, 0x04, 0x03, // Y
  0x61, 0x51, 0x49, 0x45, 0x43, // Z 90
  0x00, 0x7F, 0x41, 0x41, 0x00, // [
  0x02, 0x04, 0x08, 0x10, 0x20, // \ ::60
  0x00, 0x41, 0x41, 0x7F, 0x00, // ]
  0x00, 0x02, 0x01, 0x02, 0x00, // ^
  0x40, 0x40, 0x40, 0x40, 0x40, // _
  0x01, 0x02, 0x00, 0x00, 0x00, // `
  0x3C, 0x42, 0x42, 0x24, 0x7E, // a
  0x3F, 0x44, 0x44, 0x44, 0x38, // b
  0x38, 0x44, 0x44, 0x44, 0x28, // c
  0x38, 0x44, 0x44, 0x28, 0x7F, // d 100
  0x38, 0x54, 0x54, 0x54, 0x18, // e
  0x10, 0x7C, 0x12, 0x02, 0x04, // f ::70
  0x18, 0xA4, 0xA4, 0xA4, 0x78, // g
  0x7E, 0x08, 0x08, 0x08, 0x70, // h
  0x00, 0x00, 0x7A, 0x00, 0x00, // i
  0x40, 0x80, 0x80, 0x80, 0x7A, // j
  0x7E, 0x10, 0x30, 0x28, 0x44, // k
  0x00, 0x00, 0x7E, 0x00, 0x00, // l
  0x78, 0x08, 0x70, 0x08, 0x70, // m
  0x78, 0x10, 0x08, 0x08, 0x70, // n 110
  0x30, 0x48, 0x48, 0x48, 0x30, // o
  0xF0, 0x48, 0x48, 0x48, 0x30, // p ::80
  0x30, 0x48, 0x48, 0xF0, 0x80, // q
  0x78, 0x10, 0x08, 0x08, 0x10, // r
  0x48, 0x54, 0x54, 0x54, 0x20, // s
  0x00, 0x04, 0x3E, 0x44, 0x20, // t
  0x38, 0x40, 0x40, 0x40, 0x38, // u
  0x18, 0x20, 0x40, 0x20, 0x18, // v
  0x78, 0x40, 0x20, 0x40, 0x78, // w
  0x48, 0x30, 0x30, 0x30, 0x48, // x 120
  0x88, 0x50, 0x20, 0x10, 0x08, // y
  0x48, 0x68, 0x68, 0x58, 0x48, // z
  0x08, 0x36, 0x41, 0x00, 0x00, // {
  0x00, 0x00, 0x7F, 0x00, 0x00, // |
  0x00, 0x00, 0x41, 0x36, 0x08, // }
  0x02, 0x01, 0x02, 0x02, 0x01, // ~ 126
};

void setup() {
  pinMode(SHIFT_DATA, OUTPUT);
  pinMode(SHIFT_LATCH, OUTPUT);
  pinMode(SHIFT_CLOCK, OUTPUT);
  shiftOutValue(0);
}

void loop() {
  i++;
  i %= TEXT_SIZE;
  int c = ((int)text[i]) - 32;

  for(int col = 0; col < CHAR_WIDTH; col++) {
    int index = (c * CHAR_WIDTH) + col;
    shiftOutValue(pgm_read_byte_near(&(font[index])));
    delay(100);
    shiftOutValue(0);
    delay(900);
  }
  // space
  shiftOutValue(0);
  delay(1000);
}

void shiftOutValue(byte value) {
  digitalWrite(SHIFT_LATCH, LOW);
  shiftOut(SHIFT_DATA, SHIFT_CLOCK, MSBFIRST, value);
  digitalWrite(SHIFT_LATCH, HIGH);
}
